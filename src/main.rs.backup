#![feature(associated_type_defaults)]
#![feature(never_type)]

mod bounded_model;
mod encodeable;
mod float;
mod impls;
mod navigation_report;
use bitstream_io::{BigEndian, BitReader, BitWrite, BitWriter};
pub use encodeable::{DecodeVisitor, EncodeVisitor, Encodeable};
use navigation_report::NavigationReport;

fn main() {
    let mut bit_writer = BitWriter::endian(Vec::new(), BigEndian);

    let mut encoder = EncodeVisitor::new(32, &mut bit_writer);

    let input = NavigationReport {
        x: 450.0,
        y: 550.0,
        z: -100.0,
        vehicle_class: Some(navigation_report::VehicleClass::Auv),
        battery_ok: Some(true),
    };

    println!("input: {:?}", input);

    input.encode(&mut encoder, ()).unwrap();
    encoder.flush().unwrap();
    bit_writer.byte_align().unwrap();
    bit_writer.flush().unwrap();

    let compressed = bit_writer.into_writer();
    println!("bytes: {}", compressed.len());

    let bit_reader = BitReader::endian(compressed.as_slice(), BigEndian);

    let mut decoder = DecodeVisitor::new(32, bit_reader);

    let output = NavigationReport::decode(&mut decoder, ()).unwrap();

    println!("output: {:?}", output);
}
